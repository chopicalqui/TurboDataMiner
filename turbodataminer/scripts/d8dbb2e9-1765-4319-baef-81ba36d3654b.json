{
    "author": "Lukas Reiter", 
    "plugins": [
        0, 
        6, 
        7
    ], 
    "burp_professional_only": false, 
    "uuid": "d8dbb2e9-1765-4319-baef-81ba36d3654b", 
    "version": "v1.3", 
    "script": "\"\"\"\nThis script parses the HTTP response body for JSON objects and displays each leaf attribute together with its\nvalues in the table above. Thereby, the rows of the table are deduplicated.\n\nUse this script to identify the location of a specific value within the JSON object or to reduce the complexity of\nthe JSON object during a review.\n\"\"\"\nimport os\nimport json\nimport traceback\n\n# Do the initial setup\nif ref == 1 or \"dedup\" not in session:\n\theader = [\"Ref.\", \"Host\", \"URL\", \"Full Path\", \"Name\", \"Value\", \"Depth\"]\n\t# If you want to disable deduplication, remove the following line and press button \"Clear Session\" to \n\t# reset the content of the session variable\n\tsession[\"dedup\"] = {}\n\ndef get_items(content, url, ref, path=\"/\"):\n\t\"\"\"\n\tThis method recursively parses the given JSON object tag and returns the results in a two-dimensional list.\n\t\"\"\"\n\tresult = []\n\tif isinstance(content, dict):\n\t\tfor key, value in content.items():\r\n\t\t\tif has_stopped():\r\n\t\t\t\tbreak\n\t\t\tresult += get_items(value, url, ref, os.path.join(path, unicode(key)))\n\telif isinstance(content, list):\n\t\tfor item in content:\r\n\t\t\tif has_stopped():\r\n\t\t\t\tbreak\n\t\t\tresult += get_items(item, url, ref, path)\n\telse:\n\t\tunicode_path = unicode(path)\n\t\tpath_items = unicode_path.split(\"/\")\n\t\tresult = [[ref, get_hostname(url), url.getPath(), unicode_path, path_items[-1], unicode(content), len(path_items) - 1]]\n\treturn result\n\n# Process only in-scope HTTP responses\nresponse = message_info.getResponse()\nif in_scope and response:\n\tresponse_info = helpers.analyzeResponse(response)\n\tbody_offset = response_info.getBodyOffset()\n\tbody_bytes = response[body_offset:]\n\tbody_content = helpers.bytesToString(body_bytes)\n\t\n\ttry:\n\t\tjson_object = json.JSONDecoder().decode(body_content)\n\t\tresults = get_items(json_object, url, ref)\n    # perform deduplication\n\t\tfor row in results:\n\t\t\tkey = \":\".join([unicode(item) for item in row[1:]])\r\n\t\t\tif has_stopped():\r\n\t\t\t\tbreak\n\t\t\telif key not in session[\"dedup\"]:\n\t\t\t\trows.append(row)\n\t\t\t\tsession[\"dedup\"][key] = None\n\t\telse:\n\t\t\trows = results\n\texcept:\n\t\ttraceback.print_exc(file=callbacks.getStderr())", 
    "name": "JSON - Template Script to Display All Leaf JSON Attribute Values (Deduplicated) From Responses"
}