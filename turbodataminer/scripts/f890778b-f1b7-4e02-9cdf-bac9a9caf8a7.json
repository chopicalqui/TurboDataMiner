{
    "author": "Lukas Reiter", 
    "plugins": [
        7
    ], 
    "burp_professional_only": false, 
    "uuid": "f890778b-f1b7-4e02-9cdf-bac9a9caf8a7", 
    "version": "v0.5", 
    "script": "\"\"\"\r\nThe script allows the fast identification of characters that can be misused for XSS.\r\n\r\nPer selected parameter, this script sends a request for each character (default characters are string.punctuation + string.whitespace)\r\nand documents in the above UI table, how these characters have been processed and reflected back by the web application.\r\n\"\"\"\r\nimport re\r\nimport string\r\nfrom turbominer.scanning import ReflectedPayload as Payload\r\nfrom turbominer.scanning import SniperScanParameterBase\r\n\r\n\r\nclass SniperScanParameter(SniperScanParameterBase):\r\n\tdef __init__(self, **kwargs):\r\n\t\tSniperScanParameterBase.__init__(self, **kwargs)\r\n\r\n\tdef notify_scan_item_completed(self, category, start_time, end_time, payload, parameter, original_message, new_message, redirect_message):\r\n\t\thit = payload.check_response(redirect_message, parameter)\r\n\t\treflected_value = \", \".join(payload.reflected_values)\r\n\t\trow = [ref, original_message.http_method, original_message.host_name, original_message.url.getPath(), parameter.type_str, parameter.name, parameter.value, payload.payload, reflected_value, payload.comment, hit, (end_time - start_time).microseconds, original_message.status_code, original_message.response_content_length, new_message.status_code, new_message.response_content_length]\r\n\t\tif new_message.message_info == redirect_message.message_info:\r\n\t\t\tadd_row(row, {category: new_message.message_info})\r\n\t\telse:\r\n\t\t\tadd_row(row, {category: new_message.message_info, \"Redirect\": redirect_message.message_info})\r\n\r\n\r\nif ref == 1:\r\n\theader = [\"Ref.\", \"Method\", \"Host\", \"URL\", \"Type\", \"Parameter\", \"Value\", \"Payload\", \"Reflected Value\", \"Comment\", \"Hit\", \"Response Timer\", \"Status Code\", \"Content Length\", \"Status Code (Payload)\", \"Content Length (Payload)\"]\r\n\t# Create payloads\r\n\tpattern = \"ohN3x\"\r\n\tsession = {}\r\n\t# Test HTML entities\r\n\tsession[\"Bad Characters\"] = [Payload(payload='&quot;' + pattern, comment='\"', expected_value='(?P<value>((&quot;)|(\")))' + pattern, url_encode=True, append=True, regex=True),\r\n\t\tPayload(payload=\"&amp;\" + pattern, comment=\"&\", expected_value=\"(?P<value>((&amp;)|(&)))\" + pattern, url_encode=True, append=True, regex=True),\r\n\t\tPayload(payload=\"&apos;\" + pattern, comment=\"'\", expected_value=\"(?P<value>((&apos;)|(')))\" + pattern, url_encode=True, append=True, regex=True),\r\n\t\tPayload(payload=\"&lt;\" + pattern, comment=\"<\", expected_value=\"(?P<value>((&lt;)|(<)))\" + pattern, url_encode=True, append=True, regex=True),\r\n\t\tPayload(payload=\"&equals;\" + pattern, comment=\"<\", expected_value=\"(?P<value>((&equals;)|(=)))\" + pattern, url_encode=True, append=True, regex=True),\r\n\t\tPayload(payload=\"&gt;\" + pattern, comment=\">\", expected_value=\"(?P<value>((&gt;)|(>)))\" + pattern, url_encode=True, append=True, regex=True)\r\n\t]\r\n\tfor item in (string.punctuation + string.whitespace):\r\n\t\t# Test plain characters (e.g., <, >)\r\n\t\tsession[\"Bad Characters\"].append(Payload(payload=item + pattern, comment=item, expected_value=re.escape(item) + pattern, url_encode=False, append=True, regex=False))\r\n\t\t# Test URL-encoded characters (e.g., %3c, %3e)\r\n\t\tpayload = \"%{hex:02x}\".format(hex=ord(item))\r\n\t\tsession[\"Bad Characters\"].append(Payload(payload=payload + pattern, comment=item, expected_value=\"(?P<value>(({})|({})))\".format(re.escape(payload), re.escape(item)) + pattern, url_encode=False, append=True, regex=True))\r\n\t\t# Test hex-encoded characters (e.g., &#x3c;, %#x3e;)\r\n\t\tpayload = \"&#x{hex:02x};\".format(hex=ord(item))\r\n\t\tsession[\"Bad Characters\"].append(Payload(payload=payload + pattern, comment=item, expected_value=\"(?P<value>(({})|({})))\".format(re.escape(payload), re.escape(item)) + pattern, url_encode=False, append=True, regex=True))\r\n\t\t# Test HTML-encoded characters (e.g., &#60;, &#62;)\r\n\t\tpayload = \"&#{dec:02d};\".format(dec=ord(item))\r\n\t\tsession[\"Bad Characters\"].append(Payload(payload=payload + pattern, comment=item, expected_value=\"(?P<value>(({})|({})))\".format(re.escape(payload), re.escape(item)) + pattern, url_encode=False, append=True, regex=True))\r\n\t\t# Test unicode characters (e.g., U+0003c, U+0003e)\r\n\t\tpayload = \"U+{hex:05x}\".format(hex=ord(item)).upper()\r\n\t\tsession[\"Bad Characters\"].append(Payload(payload=payload + pattern, comment=item, expected_value=\"(?P<value>(({})|({})))\".format(re.escape(payload), re.escape(item)) + pattern, url_encode=False, append=True, regex=True))\r\n\t\t# Test CSS code (e.g., \\003C, \\003E)\r\n\t\tpayload = \"\\\\{hex:04x}\".format(hex=ord(item)).upper()\r\n\t\tsession[\"Bad Characters\"].append(Payload(payload=payload + pattern, comment=item, expected_value=\"(?P<value>(({})|({})))\".format(re.escape(payload), re.escape(item)) + pattern, url_encode=False, append=True, regex=True))\r\n\r\nscanner = SniperScanParameter(core=core, payloads=session, max_redirects=2)\r\nscanner.scan(message_info)\r\n", 
    "name": "Scan - Template Script To Check Potential XSS Vulnerabilties For Bad Characters"
}