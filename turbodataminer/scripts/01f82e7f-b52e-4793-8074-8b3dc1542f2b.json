{
    "author": "Lukas Reiter", 
    "plugins": [
        1
    ], 
    "burp_professional_only": false, 
    "uuid": "01f82e7f-b52e-4793-8074-8b3dc1542f2b", 
    "version": "v0.1", 
    "script": "\"\"\"\r\nThis script can be used to customize authorization tests.\r\n\r\nThe script clones each HTTP request and adjusts it according to the users list specified below. Aftwards, it analyzes the responses and\r\nupdates the above UI table.\r\n\"\"\"\r\n\r\nimport re\r\nfrom turbominer import UrlBlacklist\r\nfrom turbominer.authorization import UserSessionBase\r\nfrom turbominer.authorization import AuthorizationTestBase\r\nfrom turbominer.authorization import UnauthenticatedSession\r\n\r\n\r\nclass UserSession(UserSessionBase):\r\n\t\"\"\"\r\n\tThis class holds all information (e.g., session cookies, CSRF tokens, etc.) for a specific user to check the user's effective permissions.\r\n\t\"\"\"\r\n\r\n\tdef __init__(self, **kwargs):\r\n\t\tUserSessionBase.__init__(self, **kwargs)\r\n\r\n\tdef update_parameter_jar(self, core, response_info, body_content):\r\n\t\t\"\"\"\r\n\t\tDefault method that updates the parameter_jar dictionary based on the given IResponseInfo object.\r\n\r\n\t\t:param core: Core object to access Turbo Data Miner's API functions.\r\n\t\t:param response_info: The IResponseInfo object based on which the parameter_jar dictionary is updated.\r\n\t\t:param body_content: String object containing the response_info object's body.\r\n\t\t:return: None\r\n\t\t\"\"\"\r\n\t\tfor parameter_name in self._parameter_jar.keys():\r\n\t\t\t# TODO: Update regular expression to extract CSRF token out of the HTTP response's body.\r\n\t\t\tfor m in re.finditer(\"\"\"name=['\"]{}['\"] value=['\"](?P<value>.+?)['\"]\"\"\".format(parameter_name), body_content):\r\n\t\t\t\tself._parameter_jar[parameter_name] = m.group(\"value\")\r\n\r\n\r\nclass AuthorizationTest(AuthorizationTestBase):\r\n\t\"\"\"\r\n\tThis method implements all functionality to perform an authorization test.\r\n\t\"\"\"\r\n\r\n\tdef __init__(self, **kwargs):\r\n\t\tAuthorizationTestBase.__init__(self, **kwargs)\r\n\r\n\tdef _analyze_response(self, message_info, response_info=None, response_body=None):\r\n\t\t\"\"\"\r\n\t\tThis method extracts all relevant information from the given IHttpRequestResponse object to display it in the\r\n\t\tUI table.\r\n\r\n\t\t:param message_info: The IHttpRequestResponse object from which information for the UI table shall be extracted.\r\n\t\t:param response_info: The IHttpRequestResponse object's IResponseInfo object.\r\n\t\t:param response_body: The IHttpRequestResponse object's response body as string.\r\n\t\t:return: List of information that shall be displayed in the UI.\r\n\t\t\"\"\"\r\n\t\tif response_info:\r\n\t\t\t_, location = get_header(response_info.getHeaders(), \"Location\")\r\n\t\t\t# TODO: Update if we want to extract and display additional/different information.\r\n\t\t\tresult = [message_info.getStatusCode(), len(message_info.getResponse()), location if location else \"\"]\r\n\t\t\ttitle = \"\"\r\n\t\t\tfor m in re.finditer(\"<title>(?P<title>.+?)</title>\", response_body):\r\n\t\t\t\ttitle += m.group(\"title\")\r\n\t\t\tresult.append(title)\r\n\t\telse:\r\n\t\t\t# TODO: This list should have the same number of items as the list in the if branch.\r\n\t\t\tresult = [\"\", \"\", \"\", \"\"]\r\n\t\treturn result\r\n\r\n# Do the authorization testing initialization and store it in the session object.\r\nif ref == 1 or \"test\" not in session:\r\n\t# TODO: Define list of users based on which authorization shall be performed (usually one user per role).\r\n\tusers = [UserSession(core=core, name=\"TODO\", cookie_jar={\"JSESSIONID\": \"TODO\"}, parameter_jar={}, header_jar={}),\r\n\t\tUnauthenticatedSession(core=core, remove_headers=[], remove_parameters=[])]\r\n\r\n\t# TODO: Define list of URL paths (e.g., /login) or file extensions on which no authorization checks shall be performed.\r\n\tblacklist = UrlBlacklist(paths=[], extensions=[\".js\", \".gif\", \".jpg\", \".png\", \".css\", \".svg\", \".woff\", \".woff2\", \".ico\"])\r\n\t# callbacks.TOOL_PROXY\r\n\ttest = AuthorizationTest(core=core, tool_flags=[callbacks.TOOL_PROXY, callbacks.TOOL_REPEATER], users=users, blacklist=blacklist)\r\n\t# Obtain the UI table's column names. Argument custom_columns contains the names of the columns returned by AuthorizationTest._analyze_response.\r\n\t# header = test.get_table_header(custom_columns=[\"Status\", \"Size\", \"Location\", \"Title\"])\r\n\theader = test.get_table_header(custom_columns=[\"Status\", \"Size\"])\r\n\t# Store AuthorizationTest object in session.\r\n\tsession[\"test\"] = test\r\n\r\n# Perform authorization test on given IBurpExtenderCallbacks object.\r\nrow, message_infos = session[\"test\"].run(tool_flag, message_info)\r\nif row and message_infos:\r\n\tadd_table_row(row, message_infos)\r\n", 
    "name": "Authorization - Template Script to Perform Customizable Authorization Checks"
}