{
    "author": "Lukas Reiter", 
    "plugins": [
        0, 
        6, 
        7
    ], 
    "burp_professional_only": false, 
    "uuid": "12881ce6-2477-4b0c-a633-9d170f8b07ab", 
    "version": "v1.2", 
    "script": "\"\"\"\r\nThis script searches all in-scope HTTP responses for JWTs using the regular expression specified by\r\nsession[\"jwt_regex\"] (see Line 15). If a JWT is found, then it decodes the payload and displays\r\neach leaf JSON attribute in the table above. Thereby, the rows of the table are deduplicated.\n\nUse this script to identify sensitive information in JWTs.\n\"\"\"\nimport re\nimport os\nimport json\nimport traceback\r\nfrom burp import IRequestInfo\n\n# Do the initial setup\nif ref == 1 or \"jwt_regex\" not in session or \"dedup\" not in session:\n\tsession[\"jwt_regex\"] = re.compile(\"(?P<jwt>eyJ\\w+\\.eyJ\\w+\\.\\w+)\")\n\theader = [\"Ref.\", \"Host\", \"URL\", \"Request/Response\", \"JWT Component\", \"Path\", \"Name\", \"Value\", \"Depth\"]\n\tsession[\"dedup\"] = {}\n\ndef get_jwts(content):\n\t\"\"\"\n\tThis method implements the core functionality to extract information from requests or responses based on\n\tthe given regular expressions.\n\t\"\"\"\n\tglobal session\n\tresult = []\n\tfor match in session[\"jwt_regex\"].finditer(content):\r\n\t\tif has_stopped():\r\n\t\t\tbreak\n\t\tresult.append(match.group(\"jwt\"))\n\treturn result\n\ndef get_items(content, path=\"/\"):\n\t\"\"\"\n\tThis method recursively parses the given JSON object tag and returns the results in a two-dimensional list.\n\t\"\"\"\n\tresult = []\n\tif isinstance(content, dict):\n\t\tfor key, value in content.items():\n\t\t\tresult += get_items(value, os.path.join(path, unicode(key)))\n\telif isinstance(content, list):\n\t\tfor item in content:\n\t\t\tresult += get_items(item, path)\n\telse:\n\t\tunicode_path = unicode(path)\n\t\tpath_items = unicode_path.split(\"/\")\n\t\tresult = [[ref, get_hostname(url), url.getPath(), unicode_path, path_items[-1], unicode(content), len(path_items) - 1]]\n\treturn result\n\r\ndef parse_request_response_item(item, is_request):\r\n\t\"\"\"\r\n\tThis method analyses the given RequestInfo or ResponseInfo object.\r\n\t\"\"\"\r\n\ttry:\r\n\t\tjwts = get_jwts(unicode(helpers.bytesToString(item)))\r\n\t\trequest_response = \"Request\" if is_request else \"Response\"\r\n\t\tfor jwt in jwts:\r\n\t\t\tif has_stopped():\r\n\t\t\t\tbreak\r\n\t\t\ttoken = decode_jwt(jwt)\r\n\t\t\ti = 0\r\n\t\t\tfor jwt_item in token[:2]:\r\n\t\t\t\tjwt_component = \"Header\" if i == 0 else \"Payload\"\r\n\t\t\t\tjson_object = json.JSONDecoder().decode(jwt_item)\r\n\t\t\t\tresults = get_items(json_object)\r\n\t\t\t\tif \"dedup\" in session:\r\n\t\t\t\t\tfor row in results:\r\n\t\t\t\t\t\tkey = \":\".join([unicode(item) for item in row[2:]])\r\n\t\t\t\t\t\tif key not in session[\"dedup\"]:\r\n\t\t\t\t\t\t\trow.insert(3, request_response)\r\n\t\t\t\t\t\t\trow.insert(4, jwt_component)\r\n\t\t\t\t\t\t\trows.append(row)\r\n\t\t\t\t\t\t\tsession[\"dedup\"][key] = None\r\n\t\t\t\ti += 1\r\n\texcept:\r\n\t\ttraceback.print_exc(file=callbacks.getStderr())\r\n\r\n\n# Process only in-scope HTTP requests and responses\nresponse = message_info.getResponse()\nif in_scope:\r\n\tparse_request_response_item(message_info.getRequest(), True)\r\n\tif response:\n\t\tparse_request_response_item(response, False)\r\n", 
    "name": "JWT - Template Script to Extract and Display All JWT Attributes from HTTP Requests and Responses (One JSON Attribute per Table Row)"
}